---
description:
globs:
alwaysApply: always
---
mdc
title: Project Overview: MCP Process Manager
description: >
  This document provides an overview of the MCP Process Manager project.
  It implements a Background Process Manager using the Model Context Protocol (MCP).
  The goal is to provide a reliable way for AI agents to manage background processes
  (like dev servers, test watchers, build scripts, etc.) on the user's machine.

# MCP Process Manager

## Functionality

This MCP server allows an AI agent to:

- **Start Processes:** Initiate new background processes with a given command and working directory.
- **Check Status:** Query the status (starting, running, stopped, crashed, etc.) of managed processes.
- **View Logs:** Retrieve recent logs for a specific process.
- **Stop Processes:** Terminate a specific process or all managed processes.
- **Restart Processes:** Stop and then restart a specific process.
- **Wait for Processes:** Pause execution until a specific process reaches a stable 'running' state.
- **Health Check:** Get an overall status of the process manager itself.

## Available Tools

- `start_process`
- `check_process_status`
- `stop_process`
- `list_processes`
- `stop_all_processes`
- `restart_process`
- `wait_for_process`
- `health_check`

## Key Components

- **`[src/index.ts](mdc:src/index.ts)**: The main entry point and server logic. It sets up an MCP server using `@modelcontextprotocol/sdk` and defines tools for managing development server processes. It utilizes `node-pty-prebuilt-multiarch` for robust process management and communication, including handling logs, status tracking, crashes, and retries.
- **`[src/types.ts](mdc:src/types.ts)**: Defines TypeScript types and helper functions used throughout the project, particularly for standardizing the `CallToolResult` structure returned by the MCP tools and providing utility functions.

## Technology Stack

- Node.js / TypeScript
- `@modelcontextprotocol/sdk`: For creating the MCP server and defining tools.
- `node-pty-prebuilt-multiarch`: For spawning and managing child processes in pseudo-terminals.
- `zod`: For schema validation of tool inputs.
- `fkill`: To reliably terminate processes, especially on Windows.
- `tree-kill`: To ensure entire process trees are terminated.
